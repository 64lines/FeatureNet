<?xml version='1.0' encoding='UTF-8'?>
<feature_model name="FeatureIDE model">
    <feature_tree>
:r Root(Root)
	:m Base(Base)
		:m Training(Training)
			:m Architecture(Architecture)
				:m Input(Input)
				:m Output(Output)
				:o Block1(Block1)
					:o Block1_Element1(Block1_Element1)
						:o Block1_Element1_Cell(Block1_Element1_Cell)
							:m Block1_Element1_Cell_Input1(Block1_Element1_Cell_Input1)
								:g [1,1]
									: Block1_Element1_Cell_Input1_Convolution(Block1_Element1_Cell_Input1_Convolution)
										:m Block1_Element1_Cell_Input1_Convolution_kernel(Block1_Element1_Cell_Input1_Convolution_kernel)
											:g [1,1]
												: Block1_Element1_Cell_Input1_Convolution_kernel_1x1(Block1_Element1_Cell_Input1_Convolution_kernel_1x1)
												: Block1_Element1_Cell_Input1_Convolution_kernel_3x1(Block1_Element1_Cell_Input1_Convolution_kernel_3x1)
												: Block1_Element1_Cell_Input1_Convolution_kernel_1x3(Block1_Element1_Cell_Input1_Convolution_kernel_1x3)
												: Block1_Element1_Cell_Input1_Convolution_kernel_3x3(Block1_Element1_Cell_Input1_Convolution_kernel_3x3)
												: Block1_Element1_Cell_Input1_Convolution_kernel_1x5(Block1_Element1_Cell_Input1_Convolution_kernel_1x5)
												: Block1_Element1_Cell_Input1_Convolution_kernel_5x1(Block1_Element1_Cell_Input1_Convolution_kernel_5x1)
												: Block1_Element1_Cell_Input1_Convolution_kernel_5x5(Block1_Element1_Cell_Input1_Convolution_kernel_5x5)
												: Block1_Element1_Cell_Input1_Convolution_kernel_1x7(Block1_Element1_Cell_Input1_Convolution_kernel_1x7)
												: Block1_Element1_Cell_Input1_Convolution_kernel_7x1(Block1_Element1_Cell_Input1_Convolution_kernel_7x1)
										:m Block1_Element1_Cell_Input1_Convolution_type(Block1_Element1_Cell_Input1_Convolution_type)
											:g [1,1]
												: Block1_Element1_Cell_Input1_Convolution_type_normal(Block1_Element1_Cell_Input1_Convolution_type_normal)
												: Block1_Element1_Cell_Input1_Convolution_type_separable(Block1_Element1_Cell_Input1_Convolution_type_separable)
												: Block1_Element1_Cell_Input1_Convolution_type_depthwise(Block1_Element1_Cell_Input1_Convolution_type_depthwise)
										:m Block1_Element1_Cell_Input1_Convolution_padding(Block1_Element1_Cell_Input1_Convolution_padding)
											:g [1,1]
												: Block1_Element1_Cell_Input1_Convolution_padding_same(Block1_Element1_Cell_Input1_Convolution_padding_same)
										:m Block1_Element1_Cell_Input1_Convolution_activation(Block1_Element1_Cell_Input1_Convolution_activation)
											:g [1,1]
												: Block1_Element1_Cell_Input1_Convolution_activation_relu(Block1_Element1_Cell_Input1_Convolution_activation_relu)
									: Block1_Element1_Cell_Input1_Identity(Block1_Element1_Cell_Input1_Identity)
									: Block1_Element1_Cell_Input1_Zeros(Block1_Element1_Cell_Input1_Zeros)
							:m Block1_Element1_Cell_Input2(Block1_Element1_Cell_Input2)
								:g [1,1]
									: Block1_Element1_Cell_Input2_Convolution(Block1_Element1_Cell_Input2_Convolution)
										:m Block1_Element1_Cell_Input2_Convolution_kernel(Block1_Element1_Cell_Input2_Convolution_kernel)
											:g [1,1]
												: Block1_Element1_Cell_Input2_Convolution_kernel_1x1(Block1_Element1_Cell_Input2_Convolution_kernel_1x1)
												: Block1_Element1_Cell_Input2_Convolution_kernel_2x2(Block1_Element1_Cell_Input2_Convolution_kernel_2x2)
												: Block1_Element1_Cell_Input2_Convolution_kernel_3x1(Block1_Element1_Cell_Input2_Convolution_kernel_3x1)
												: Block1_Element1_Cell_Input2_Convolution_kernel_1x3(Block1_Element1_Cell_Input2_Convolution_kernel_1x3)
												: Block1_Element1_Cell_Input2_Convolution_kernel_3x3(Block1_Element1_Cell_Input2_Convolution_kernel_3x3)
												: Block1_Element1_Cell_Input2_Convolution_kernel_1x5(Block1_Element1_Cell_Input2_Convolution_kernel_1x5)
												: Block1_Element1_Cell_Input2_Convolution_kernel_5x1(Block1_Element1_Cell_Input2_Convolution_kernel_5x1)
										:m Block1_Element1_Cell_Input2_Convolution_type(Block1_Element1_Cell_Input2_Convolution_type)
											:g [1,1]
												: Block1_Element1_Cell_Input2_Convolution_type_normal(Block1_Element1_Cell_Input2_Convolution_type_normal)
												: Block1_Element1_Cell_Input2_Convolution_type_separable(Block1_Element1_Cell_Input2_Convolution_type_separable)
												: Block1_Element1_Cell_Input2_Convolution_type_depthwise(Block1_Element1_Cell_Input2_Convolution_type_depthwise)
										:m Block1_Element1_Cell_Input2_Convolution_padding(Block1_Element1_Cell_Input2_Convolution_padding)
											:g [1,1]
												: Block1_Element1_Cell_Input2_Convolution_padding_same(Block1_Element1_Cell_Input2_Convolution_padding_same)
										:m Block1_Element1_Cell_Input2_Convolution_activation(Block1_Element1_Cell_Input2_Convolution_activation)
											:g [1,1]
												: Block1_Element1_Cell_Input2_Convolution_activation_relu(Block1_Element1_Cell_Input2_Convolution_activation_relu)
									: Block1_Element1_Cell_Input2_Identity(Block1_Element1_Cell_Input2_Identity)
									: Block1_Element1_Cell_Input2_Zeros(Block1_Element1_Cell_Input2_Zeros)
							:m Block1_Element1_Cell_Operation1(Block1_Element1_Cell_Operation1)
								:g [1,1]
									: Block1_Element1_Cell_Operation1_Void(Block1_Element1_Cell_Operation1_Void)
									: Block1_Element1_Cell_Operation1_BatchNormalization(Block1_Element1_Cell_Operation1_BatchNormalization)
									: Block1_Element1_Cell_Operation1_Dropout(Block1_Element1_Cell_Operation1_Dropout)
										:o Block1_Element1_Cell_Operation1_Dropout_value(Block1_Element1_Cell_Operation1_Dropout_value)
											:g [1,1]
												: Block1_Element1_Cell_Operation1_Dropout_value_5(Block1_Element1_Cell_Operation1_Dropout_value_5)
												: Block1_Element1_Cell_Operation1_Dropout_value_0(Block1_Element1_Cell_Operation1_Dropout_value_0)
							:m Block1_Element1_Cell_Operation2(Block1_Element1_Cell_Operation2)
								:g [1,1]
									: Block1_Element1_Cell_Operation2_Void(Block1_Element1_Cell_Operation2_Void)
									: Block1_Element1_Cell_Operation2_BatchNormalization(Block1_Element1_Cell_Operation2_BatchNormalization)
									: Block1_Element1_Cell_Operation2_Dropout(Block1_Element1_Cell_Operation2_Dropout)
										:o Block1_Element1_Cell_Operation2_Dropout_value(Block1_Element1_Cell_Operation2_Dropout_value)
											:g [1,1]
												: Block1_Element1_Cell_Operation2_Dropout_value_5(Block1_Element1_Cell_Operation2_Dropout_value_5)
												: Block1_Element1_Cell_Operation2_Dropout_value_0(Block1_Element1_Cell_Operation2_Dropout_value_0)
							:m Block1_Element1_Cell_Combination(Block1_Element1_Cell_Combination)
								:g [1,1]
									: Block1_Element1_Cell_Combination_Concat(Block1_Element1_Cell_Combination_Concat)
									: Block1_Element1_Cell_Combination_Sum(Block1_Element1_Cell_Combination_Sum)
							:m Block1_Element1_Cell_Output(Block1_Element1_Cell_Output)
								:g [1,1]
									: Block1_Element1_Cell_Output_Block(Block1_Element1_Cell_Output_Block)
									: Block1_Element1_Cell_Output_Cell(Block1_Element1_Cell_Output_Cell)
										:o Block1_Element1_Cell_Output_Cell_relativeCellIndex(Block1_Element1_Cell_Output_Cell_relativeCellIndex)
											:g [1,1]
												: Block1_Element1_Cell_Output_Cell_relativeCellIndex_0(Block1_Element1_Cell_Output_Cell_relativeCellIndex_0)
												: Block1_Element1_Cell_Output_Cell_relativeCellIndex_1(Block1_Element1_Cell_Output_Cell_relativeCellIndex_1)
												: Block1_Element1_Cell_Output_Cell_relativeCellIndex_2(Block1_Element1_Cell_Output_Cell_relativeCellIndex_2)
</feature_tree>
    <constraints>
C1:~Architecture  or  Block1
C2:~Architecture  or  ~Block1_Element1_Cell_Input1_Zeros
</constraints>
</feature_model>